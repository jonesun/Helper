apply from: '/application.gradle'

android {
    compileSdkVersion Integer.parseInt(project.COMPILE_SDK_VERSION)
    buildToolsVersion project.BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId "jone.helper"
        minSdkVersion Integer.parseInt(project.MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.TARGET_SDK_VERSION)
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName VERSION_NAME
//        ndk {
//            moduleName "tp_file"
//            //stl "stlport_shared"    //对应APP_STL
//            ldLibs "log", "z", "m"  //链接时使用到的库，对应LOCAL_LDLIBS
//            //cFlags 编译gcc的flag，对应LOCAL_CFLAGS
//        }

        manifestPlaceholders = [UMENG_CHANNEL_VALUE: "UMENG"]
    }
    //打包签名
    signingConfigs {
        release {
            storeFile file('store.jks')
            storePassword 'sunjianan22'
            keyAlias 'jonesun'
            keyPassword 'sunjianan22'
//            storeFile file(System.getenv("KEYSTORE"))
//            storePassword System.getenv("KEYSTORE_PASSWORD")
//            keyAlias System.getenv("KEY_ALIAS")
//            keyPassword System.getenv("KEY_PASSWORD")
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            applicationVariants.all { variant ->
                def productFlavor = variant.productFlavors[0]
                String versionName = productFlavor.versionName
                if(versionName == null){
                    versionName = defaultConfig.versionName
                }
                String versionCode = productFlavor.versionCode
                if(versionCode == null){
                    versionCode = defaultConfig.versionCode
                }
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def fileName = outputFile.name.replace(".apk", "") + "_" + versionName + "_" + versionCode + "_${releaseTime()}.apk"
                        println("fileName: " + fileName)
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }
    }

    sourceSets {
        main {
            //java.srcDirs = ['src/main/java']
            res.srcDirs = getSrcDirs('src/main/res', 'src/main/res-modules')
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:22.2.1'
    compile 'com.android.support:support-v13:22.2.1'
    compile 'com.android.support:cardview-v7:22.2.1'
    compile 'com.android.support:recyclerview-v7:22.2.1'
    compile 'com.belerweb:pinyin4j:2.5.0'
    compile 'com.umeng.analytics:analytics:latest.integration'
    compile project(':libraries:Gallery3D')
    compile project(':libraries:Camera')
    compile project(':libraries:JoneLib')
    compile project(':libraries:ZxingScan')
    testCompile 'junit:junit:4.12'
    compile project(':yalantiscontextmenu')
}

def getSrcDirs(defaultSrcDirs, customSrcDirsRoot) {
    ArrayList empty1 = [defaultSrcDirs]
    def tree = fileTree(dir: customSrcDirsRoot)
    tree.visit { element ->
        if (element.isDirectory() && element.relativePath.toString().indexOf("/") == -1) {
            empty1.add element.file.toString()
        }
    }
    return empty1;
}

def releaseTime() {
    return new Date().format("yyyy_MM_dd")
}

