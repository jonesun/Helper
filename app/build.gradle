//apply plugin: 'com.android.application' //or apply plugin: 'java'
apply from: '/application.gradle'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    //buildToolsVersion "24.0.0 rc3"

    defaultConfig {
        applicationId "jone.helper"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName VERSION_NAME
        manifestPlaceholders = [UMENG_CHANNEL_VALUE: "UMENG"]

        flavorDimensions "default"

//        multiDexEnabled = true
//        multiDexKeepProguard file('multi-dex-keep.txt')

        //使用Jack编译器
//        jackOptions{
//            enabled true
//        }
    }

//    dataBinding {
//        enabled = true
//    }

    //打包签名
    signingConfigs {
        release {
            try {
                storeFile file('store.jks')
                //                storeFile file(System.getenv("KEYSTORE"))
                storePassword System.getenv("KEYSTORE_PASSWORD")
                keyAlias System.getenv("KEY_ALIAS")
                keyPassword System.getenv("KEY_PASSWORD")
            }
            catch (ex) {
//                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            applicationVariants.all { variant ->
                def productFlavor = variant.productFlavors[0]
                String versionName = productFlavor.versionName
                if (versionName == null) {
                    versionName = defaultConfig.versionName
                }
                String versionCode = productFlavor.versionCode
                if (versionCode == null) {
                    versionCode = defaultConfig.versionCode
                }
                variant.outputs.all { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def fileName = outputFile.name.replace(".apk", "") + "_" + versionName + "_" + versionCode + "_${releaseTime()}.apk"
                        println("fileName: " + fileName)
                        outputFileName = fileName
//                        if (output.zipAlign != null) {
//                            output.zipAlign.doLast {
//                                output.zipAlign.inputFile.delete()
//                            }
//                        }
                    }
                }
            }
        }
    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/java', 'src/main/java-gen']
            res.srcDirs = getSrcDirs('src/main/res', 'src/main/res-modules')
        }
    }

//    //使用Java1.8
//    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_1_8
//        targetCompatibility JavaVersion.VERSION_1_8
//    }


    compileOptions {
//        encoding "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/MANIFEST.MF'
    }

    //删除unaligned apk
//    android.libraryVariants.all { variant ->
//        variant.outputs.each { output ->
//            if (output.zipAlign != null) {
//                output.zipAlign.doLast {
//                    output.zipAlign.inputFile.delete()
//                }
//            }
//        }
//    }

}

repositories {
    flatDir {
//        dirs rootDir.getPath() + File.separator + 'aars'
        dirs 'aars'
    }
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    compile(name: 'Gallery3D-release1.0', ext: 'aar')
    //    compile(name: 'ZxingScan-release1.0', ext: 'aar')
    compile(name: 'yalantiscontextmenu-release1.0', ext: 'aar')
    implementation project(':libraries:JoneLib')
    testImplementation 'junit:junit:4.12'
    implementation project(':libraries:ZxingScan')
    implementation project(':libraries:viewpagerindicator')
    implementation 'com.google.zxing:core:3.0.1'
//    implementation 'com.nineoldandroids:library:2.4.0'
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.palette:palette:1.0.0'
//    implementation 'com.android.support:support-v13:23.2.1'
//    implementation 'com.android.support:recyclerview-v7:23.2.1'
    implementation 'com.umeng.analytics:analytics:6.1.4'
    implementation 'cn.lightsky.infiniteindicator:library:1.1.0'
//    implementation 'com.android.support:support-v4:23.2.1'
    implementation 'de.greenrobot:greendao:2.1.0'

//    debugimplementation 'com.squareup.leakcanary:leakcanary-android:1.3.1' // or 1.4-beta1
//    releaseimplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1' // or 1.4-beta1
//    testImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1' // or 1.4-beta1
}

def getSrcDirs(defaultSrcDirs, customSrcDirsRoot) {
    ArrayList empty1 = [defaultSrcDirs]
    def tree = fileTree(dir: customSrcDirsRoot)
    tree.visit { element ->
        if (element.isDirectory() && element.relativePath.toString().indexOf("/") == -1) {
            empty1.add element.file.toString()
        }
    }
    return empty1;
}

def releaseTime() {
    return new Date().format("yyyy_MM_dd")
}




